<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>__GI___libc_open (5 samples, 0.16%)</title><rect x="530.4" y="453" width="1.9" height="15.0" fill="rgb(216,78,37)" rx="2" ry="2" />
<text  x="533.40" y="463.5" ></text>
</g>
<g >
<title>perf_event_context_sched_in (4 samples, 0.13%)</title><rect x="530.8" y="101" width="1.5" height="15.0" fill="rgb(231,101,26)" rx="2" ry="2" />
<text  x="533.78" y="111.5" ></text>
</g>
<g >
<title>search_binary_handler (4 samples, 0.13%)</title><rect x="10.0" y="405" width="1.5" height="15.0" fill="rgb(246,5,40)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (4 samples, 0.13%)</title><rect x="1184.0" y="453" width="1.5" height="15.0" fill="rgb(238,174,18)" rx="2" ry="2" />
<text  x="1187.00" y="463.5" ></text>
</g>
<g >
<title>perf_event_context_sched_in (4 samples, 0.13%)</title><rect x="609.6" y="389" width="1.5" height="15.0" fill="rgb(223,70,24)" rx="2" ry="2" />
<text  x="612.57" y="399.5" ></text>
</g>
<g >
<title>rpc_run_task (4 samples, 0.13%)</title><rect x="530.8" y="245" width="1.5" height="15.0" fill="rgb(252,194,4)" rx="2" ry="2" />
<text  x="533.78" y="255.5" ></text>
</g>
<g >
<title>update_process_times (4 samples, 0.13%)</title><rect x="1184.0" y="373" width="1.5" height="15.0" fill="rgb(224,15,54)" rx="2" ry="2" />
<text  x="1187.00" y="383.5" ></text>
</g>
<g >
<title>rpc_wait_bit_killable (4 samples, 0.13%)</title><rect x="530.8" y="165" width="1.5" height="15.0" fill="rgb(228,141,13)" rx="2" ry="2" />
<text  x="533.78" y="175.5" ></text>
</g>
<g >
<title>path_walk (5 samples, 0.16%)</title><rect x="530.4" y="357" width="1.9" height="15.0" fill="rgb(229,57,38)" rx="2" ry="2" />
<text  x="533.40" y="367.5" ></text>
</g>
<g >
<title>randlc (1,289 samples, 40.99%)</title><rect x="46.4" y="453" width="483.6" height="15.0" fill="rgb(246,168,5)" rx="2" ry="2" />
<text  x="49.39" y="463.5" >randlc</text>
</g>
<g >
<title>randlc (8 samples, 0.25%)</title><rect x="608.1" y="469" width="3.0" height="15.0" fill="rgb(223,196,45)" rx="2" ry="2" />
<text  x="611.07" y="479.5" ></text>
</g>
<g >
<title>do_sys_open (5 samples, 0.16%)</title><rect x="530.4" y="405" width="1.9" height="15.0" fill="rgb(219,109,41)" rx="2" ry="2" />
<text  x="533.40" y="415.5" ></text>
</g>
<g >
<title>do_mmap_pgoff (1 samples, 0.03%)</title><rect x="530.0" y="357" width="0.4" height="15.0" fill="rgb(248,66,23)" rx="2" ry="2" />
<text  x="533.03" y="367.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.13%)</title><rect x="530.8" y="117" width="1.5" height="15.0" fill="rgb(247,109,23)" rx="2" ry="2" />
<text  x="533.78" y="127.5" ></text>
</g>
<g >
<title>perf_pmu_enable (4 samples, 0.13%)</title><rect x="609.6" y="373" width="1.5" height="15.0" fill="rgb(241,205,17)" rx="2" ry="2" />
<text  x="612.57" y="383.5" ></text>
</g>
<g >
<title>native_write_msr_safe (4 samples, 0.13%)</title><rect x="609.6" y="325" width="1.5" height="15.0" fill="rgb(215,65,40)" rx="2" ry="2" />
<text  x="612.57" y="335.5" ></text>
</g>
<g >
<title>clear_page_c_e (11 samples, 0.35%)</title><rect x="42.3" y="357" width="4.1" height="15.0" fill="rgb(232,226,7)" rx="2" ry="2" />
<text  x="45.27" y="367.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.03%)</title><rect x="1185.1" y="325" width="0.4" height="15.0" fill="rgb(213,159,15)" rx="2" ry="2" />
<text  x="1188.12" y="335.5" ></text>
</g>
<g >
<title>retint_careful (4 samples, 0.13%)</title><rect x="609.6" y="453" width="1.5" height="15.0" fill="rgb(225,110,15)" rx="2" ry="2" />
<text  x="612.57" y="463.5" ></text>
</g>
<g >
<title>setup_new_exec (4 samples, 0.13%)</title><rect x="10.0" y="373" width="1.5" height="15.0" fill="rgb(206,147,51)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>__fopen_internal (5 samples, 0.16%)</title><rect x="530.4" y="469" width="1.9" height="15.0" fill="rgb(241,188,3)" rx="2" ry="2" />
<text  x="533.40" y="479.5" ></text>
</g>
<g >
<title>__run_hrtimer (4 samples, 0.13%)</title><rect x="1184.0" y="405" width="1.5" height="15.0" fill="rgb(210,211,4)" rx="2" ry="2" />
<text  x="1187.00" y="415.5" ></text>
</g>
<g >
<title>native_write_msr_safe (4 samples, 0.13%)</title><rect x="10.0" y="261" width="1.5" height="15.0" fill="rgb(235,32,29)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (12 samples, 0.38%)</title><rect x="1185.5" y="405" width="4.5" height="15.0" fill="rgb(249,114,3)" rx="2" ry="2" />
<text  x="1188.50" y="415.5" ></text>
</g>
<g >
<title>system_call_fastpath (5 samples, 0.16%)</title><rect x="530.4" y="437" width="1.9" height="15.0" fill="rgb(233,170,17)" rx="2" ry="2" />
<text  x="533.40" y="447.5" ></text>
</g>
<g >
<title>scheduler_tick (4 samples, 0.13%)</title><rect x="1184.0" y="357" width="1.5" height="15.0" fill="rgb(251,208,0)" rx="2" ry="2" />
<text  x="1187.00" y="367.5" ></text>
</g>
<g >
<title>__link_path_walk (5 samples, 0.16%)</title><rect x="530.4" y="341" width="1.9" height="15.0" fill="rgb(236,222,9)" rx="2" ry="2" />
<text  x="533.40" y="351.5" ></text>
</g>
<g >
<title>perf_event_comm (4 samples, 0.13%)</title><rect x="10.0" y="341" width="1.5" height="15.0" fill="rgb(215,102,14)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>set_task_comm (4 samples, 0.13%)</title><rect x="10.0" y="357" width="1.5" height="15.0" fill="rgb(219,30,0)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>native_write_msr_safe (4 samples, 0.13%)</title><rect x="530.8" y="37" width="1.5" height="15.0" fill="rgb(221,57,53)" rx="2" ry="2" />
<text  x="533.78" y="47.5" ></text>
</g>
<g >
<title>do_execve (1 samples, 0.03%)</title><rect x="530.0" y="421" width="0.4" height="15.0" fill="rgb(222,103,28)" rx="2" ry="2" />
<text  x="533.03" y="431.5" ></text>
</g>
<g >
<title>__rpc_execute (4 samples, 0.13%)</title><rect x="530.8" y="213" width="1.5" height="15.0" fill="rgb(235,20,27)" rx="2" ry="2" />
<text  x="533.78" y="223.5" ></text>
</g>
<g >
<title>tick_sched_timer (3 samples, 0.10%)</title><rect x="608.1" y="389" width="1.1" height="15.0" fill="rgb(250,188,29)" rx="2" ry="2" />
<text  x="611.07" y="399.5" ></text>
</g>
<g >
<title>kfree (1 samples, 0.03%)</title><rect x="530.4" y="293" width="0.4" height="15.0" fill="rgb(249,26,20)" rx="2" ry="2" />
<text  x="533.40" y="303.5" ></text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.03%)</title><rect x="530.0" y="405" width="0.4" height="15.0" fill="rgb(206,80,18)" rx="2" ry="2" />
<text  x="533.03" y="415.5" ></text>
</g>
<g >
<title>scheduler_tick (3 samples, 0.10%)</title><rect x="608.1" y="357" width="1.1" height="15.0" fill="rgb(239,50,35)" rx="2" ry="2" />
<text  x="611.07" y="367.5" ></text>
</g>
<g >
<title>create_seq (93 samples, 2.96%)</title><rect x="11.5" y="453" width="34.9" height="15.0" fill="rgb(253,128,11)" rx="2" ry="2" />
<text  x="14.50" y="463.5" >cr..</text>
</g>
<g >
<title>hrtimer_interrupt (4 samples, 0.13%)</title><rect x="1184.0" y="421" width="1.5" height="15.0" fill="rgb(238,7,30)" rx="2" ry="2" />
<text  x="1187.00" y="431.5" ></text>
</g>
<g >
<title>[unknown] (1,383 samples, 43.97%)</title><rect x="11.5" y="469" width="518.9" height="15.0" fill="rgb(212,26,14)" rx="2" ry="2" />
<text  x="14.50" y="479.5" >[unknown]</text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.13%)</title><rect x="609.6" y="405" width="1.5" height="15.0" fill="rgb(217,111,45)" rx="2" ry="2" />
<text  x="612.57" y="415.5" ></text>
</g>
<g >
<title>stub_execve (1 samples, 0.03%)</title><rect x="530.0" y="453" width="0.4" height="15.0" fill="rgb(217,62,9)" rx="2" ry="2" />
<text  x="533.03" y="463.5" ></text>
</g>
<g >
<title>account_cfs_rq_runtime (1 samples, 0.03%)</title><rect x="1185.1" y="309" width="0.4" height="15.0" fill="rgb(214,152,50)" rx="2" ry="2" />
<text  x="1188.12" y="319.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.13%)</title><rect x="609.6" y="421" width="1.5" height="15.0" fill="rgb(237,114,32)" rx="2" ry="2" />
<text  x="612.57" y="431.5" ></text>
</g>
<g >
<title>full_verify (202 samples, 6.42%)</title><rect x="532.3" y="469" width="75.8" height="15.0" fill="rgb(243,15,37)" rx="2" ry="2" />
<text  x="535.28" y="479.5" >full_ver..</text>
</g>
<g >
<title>clear_page_c_e (12 samples, 0.38%)</title><rect x="1185.5" y="373" width="4.5" height="15.0" fill="rgb(254,35,33)" rx="2" ry="2" />
<text  x="1188.50" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (11 samples, 0.35%)</title><rect x="42.3" y="389" width="4.1" height="15.0" fill="rgb(247,200,17)" rx="2" ry="2" />
<text  x="45.27" y="399.5" ></text>
</g>
<g >
<title>sys_open (5 samples, 0.16%)</title><rect x="530.4" y="421" width="1.9" height="15.0" fill="rgb(233,226,44)" rx="2" ry="2" />
<text  x="533.40" y="431.5" ></text>
</g>
<g >
<title>out_of_line_wait_on_bit (4 samples, 0.13%)</title><rect x="530.8" y="197" width="1.5" height="15.0" fill="rgb(248,0,28)" rx="2" ry="2" />
<text  x="533.78" y="207.5" ></text>
</g>
<g >
<title>tick_sched_timer (4 samples, 0.13%)</title><rect x="1184.0" y="389" width="1.5" height="15.0" fill="rgb(251,4,51)" rx="2" ry="2" />
<text  x="1187.00" y="399.5" ></text>
</g>
<g >
<title>do_lookup (5 samples, 0.16%)</title><rect x="530.4" y="325" width="1.9" height="15.0" fill="rgb(210,64,45)" rx="2" ry="2" />
<text  x="533.40" y="335.5" ></text>
</g>
<g >
<title>perf_pmu_enable (4 samples, 0.13%)</title><rect x="530.8" y="85" width="1.5" height="15.0" fill="rgb(247,114,10)" rx="2" ry="2" />
<text  x="533.78" y="95.5" ></text>
</g>
<g >
<title>idle_cpu (1 samples, 0.03%)</title><rect x="609.2" y="405" width="0.4" height="15.0" fill="rgb(230,70,39)" rx="2" ry="2" />
<text  x="612.19" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (4 samples, 0.13%)</title><rect x="608.1" y="437" width="1.5" height="15.0" fill="rgb(230,88,37)" rx="2" ry="2" />
<text  x="611.07" y="447.5" ></text>
</g>
<g >
<title>sys_execve (1 samples, 0.03%)</title><rect x="530.0" y="437" width="0.4" height="15.0" fill="rgb(238,48,16)" rx="2" ry="2" />
<text  x="533.03" y="447.5" ></text>
</g>
<g >
<title>rpc_execute (4 samples, 0.13%)</title><rect x="530.8" y="229" width="1.5" height="15.0" fill="rgb(219,168,6)" rx="2" ry="2" />
<text  x="533.78" y="239.5" ></text>
</g>
<g >
<title>nfs_lookup (5 samples, 0.16%)</title><rect x="530.4" y="309" width="1.9" height="15.0" fill="rgb(206,179,10)" rx="2" ry="2" />
<text  x="533.40" y="319.5" ></text>
</g>
<g >
<title>sys_execve (4 samples, 0.13%)</title><rect x="10.0" y="437" width="1.5" height="15.0" fill="rgb(220,6,49)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (4 samples, 0.13%)</title><rect x="608.1" y="453" width="1.5" height="15.0" fill="rgb(216,191,40)" rx="2" ry="2" />
<text  x="611.07" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.38%)</title><rect x="1185.5" y="437" width="4.5" height="15.0" fill="rgb(234,171,2)" rx="2" ry="2" />
<text  x="1188.50" y="447.5" ></text>
</g>
<g >
<title>task_tick_fair (2 samples, 0.06%)</title><rect x="1184.7" y="341" width="0.8" height="15.0" fill="rgb(253,45,7)" rx="2" ry="2" />
<text  x="1187.75" y="351.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.13%)</title><rect x="609.6" y="357" width="1.5" height="15.0" fill="rgb(235,89,41)" rx="2" ry="2" />
<text  x="612.57" y="367.5" ></text>
</g>
<g >
<title>nfs3_proc_lookup (4 samples, 0.13%)</title><rect x="530.8" y="293" width="1.5" height="15.0" fill="rgb(239,30,16)" rx="2" ry="2" />
<text  x="533.78" y="303.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (4 samples, 0.13%)</title><rect x="1184.0" y="437" width="1.5" height="15.0" fill="rgb(250,42,43)" rx="2" ry="2" />
<text  x="1187.00" y="447.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.13%)</title><rect x="10.0" y="293" width="1.5" height="15.0" fill="rgb(223,71,23)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>task_tick_fair (1 samples, 0.03%)</title><rect x="608.1" y="341" width="0.3" height="15.0" fill="rgb(224,220,49)" rx="2" ry="2" />
<text  x="611.07" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.38%)</title><rect x="1185.5" y="421" width="4.5" height="15.0" fill="rgb(251,207,2)" rx="2" ry="2" />
<text  x="1188.50" y="431.5" ></text>
</g>
<g >
<title>page_fault (11 samples, 0.35%)</title><rect x="42.3" y="437" width="4.1" height="15.0" fill="rgb(240,88,25)" rx="2" ry="2" />
<text  x="45.27" y="447.5" ></text>
</g>
<g >
<title>do_huge_pmd_anonymous_page (11 samples, 0.35%)</title><rect x="42.3" y="373" width="4.1" height="15.0" fill="rgb(240,139,49)" rx="2" ry="2" />
<text  x="45.27" y="383.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.13%)</title><rect x="10.0" y="277" width="1.5" height="15.0" fill="rgb(247,166,38)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>load_elf_binary (4 samples, 0.13%)</title><rect x="10.0" y="389" width="1.5" height="15.0" fill="rgb(248,116,32)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>update_cpu_load (2 samples, 0.06%)</title><rect x="608.4" y="341" width="0.8" height="15.0" fill="rgb(224,100,26)" rx="2" ry="2" />
<text  x="611.44" y="351.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.13%)</title><rect x="530.8" y="133" width="1.5" height="15.0" fill="rgb(229,22,38)" rx="2" ry="2" />
<text  x="533.78" y="143.5" ></text>
</g>
<g >
<title>do_filp_open (5 samples, 0.16%)</title><rect x="530.4" y="389" width="1.9" height="15.0" fill="rgb(214,189,25)" rx="2" ry="2" />
<text  x="533.40" y="399.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (3 samples, 0.10%)</title><rect x="608.1" y="421" width="1.1" height="15.0" fill="rgb(251,177,46)" rx="2" ry="2" />
<text  x="611.07" y="431.5" ></text>
</g>
<g >
<title>do_path_lookup (5 samples, 0.16%)</title><rect x="530.4" y="373" width="1.9" height="15.0" fill="rgb(208,130,33)" rx="2" ry="2" />
<text  x="533.40" y="383.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.03%)</title><rect x="530.0" y="389" width="0.4" height="15.0" fill="rgb(208,66,38)" rx="2" ry="2" />
<text  x="533.03" y="399.5" ></text>
</g>
<g >
<title>rpc_call_sync (4 samples, 0.13%)</title><rect x="530.8" y="261" width="1.5" height="15.0" fill="rgb(224,92,40)" rx="2" ry="2" />
<text  x="533.78" y="271.5" ></text>
</g>
<g >
<title>all (3,145 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(232,186,0)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>__run_hrtimer (3 samples, 0.10%)</title><rect x="608.1" y="405" width="1.1" height="15.0" fill="rgb(247,74,36)" rx="2" ry="2" />
<text  x="611.07" y="415.5" ></text>
</g>
<g >
<title>nfs3_rpc_wrapper.clone.0 (4 samples, 0.13%)</title><rect x="530.8" y="277" width="1.5" height="15.0" fill="rgb(245,159,29)" rx="2" ry="2" />
<text  x="533.78" y="287.5" ></text>
</g>
<g >
<title>do_page_fault (11 samples, 0.35%)</title><rect x="42.3" y="421" width="4.1" height="15.0" fill="rgb(212,64,7)" rx="2" ry="2" />
<text  x="45.27" y="431.5" ></text>
</g>
<g >
<title>thread_return (4 samples, 0.13%)</title><rect x="530.8" y="149" width="1.5" height="15.0" fill="rgb(242,131,10)" rx="2" ry="2" />
<text  x="533.78" y="159.5" ></text>
</g>
<g >
<title>thread_return (4 samples, 0.13%)</title><rect x="609.6" y="437" width="1.5" height="15.0" fill="rgb(249,76,51)" rx="2" ry="2" />
<text  x="612.57" y="447.5" ></text>
</g>
<g >
<title>irq_enter (1 samples, 0.03%)</title><rect x="609.2" y="421" width="0.4" height="15.0" fill="rgb(218,52,4)" rx="2" ry="2" />
<text  x="612.19" y="431.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.13%)</title><rect x="530.8" y="69" width="1.5" height="15.0" fill="rgb(249,199,51)" rx="2" ry="2" />
<text  x="533.78" y="79.5" ></text>
</g>
<g >
<title>page_fault (12 samples, 0.38%)</title><rect x="1185.5" y="453" width="4.5" height="15.0" fill="rgb(240,212,14)" rx="2" ry="2" />
<text  x="1188.50" y="463.5" ></text>
</g>
<g >
<title>update_process_times (3 samples, 0.10%)</title><rect x="608.1" y="373" width="1.1" height="15.0" fill="rgb(250,203,12)" rx="2" ry="2" />
<text  x="611.07" y="383.5" ></text>
</g>
<g >
<title>update_cfs_load (1 samples, 0.03%)</title><rect x="608.1" y="325" width="0.3" height="15.0" fill="rgb(238,144,19)" rx="2" ry="2" />
<text  x="611.07" y="335.5" ></text>
</g>
<g >
<title>ext4_file_mmap (1 samples, 0.03%)</title><rect x="530.0" y="341" width="0.4" height="15.0" fill="rgb(223,172,14)" rx="2" ry="2" />
<text  x="533.03" y="351.5" ></text>
</g>
<g >
<title>stub_execve (4 samples, 0.13%)</title><rect x="10.0" y="453" width="1.5" height="15.0" fill="rgb(231,93,27)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>elf_map (1 samples, 0.03%)</title><rect x="530.0" y="373" width="0.4" height="15.0" fill="rgb(241,155,49)" rx="2" ry="2" />
<text  x="533.03" y="383.5" ></text>
</g>
<g >
<title>is.C.x (3,141 samples, 99.87%)</title><rect x="11.5" y="485" width="1178.5" height="15.0" fill="rgb(219,91,26)" rx="2" ry="2" />
<text  x="14.50" y="495.5" >is.C.x</text>
</g>
<g >
<title>do_huge_pmd_anonymous_page (12 samples, 0.38%)</title><rect x="1185.5" y="389" width="4.5" height="15.0" fill="rgb(239,212,30)" rx="2" ry="2" />
<text  x="1188.50" y="399.5" ></text>
</g>
<g >
<title>perf_event_context_sched_in (4 samples, 0.13%)</title><rect x="10.0" y="325" width="1.5" height="15.0" fill="rgb(218,46,33)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>do_execve (4 samples, 0.13%)</title><rect x="10.0" y="421" width="1.5" height="15.0" fill="rgb(217,59,17)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>update_cfs_load (1 samples, 0.03%)</title><rect x="1184.7" y="325" width="0.4" height="15.0" fill="rgb(243,32,40)" rx="2" ry="2" />
<text  x="1187.75" y="335.5" ></text>
</g>
<g >
<title>perf_pmu_enable (4 samples, 0.13%)</title><rect x="10.0" y="309" width="1.5" height="15.0" fill="rgb(213,41,53)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__do_page_fault (11 samples, 0.35%)</title><rect x="42.3" y="405" width="4.1" height="15.0" fill="rgb(248,160,6)" rx="2" ry="2" />
<text  x="45.27" y="415.5" ></text>
</g>
<g >
<title>:10821 (4 samples, 0.13%)</title><rect x="10.0" y="485" width="1.5" height="15.0" fill="rgb(209,165,34)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>__wait_on_bit (4 samples, 0.13%)</title><rect x="530.8" y="181" width="1.5" height="15.0" fill="rgb(222,128,10)" rx="2" ry="2" />
<text  x="533.78" y="191.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.13%)</title><rect x="10.0" y="469" width="1.5" height="15.0" fill="rgb(239,169,38)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>_spin_lock (2 samples, 0.06%)</title><rect x="1184.0" y="341" width="0.7" height="15.0" fill="rgb(215,101,31)" rx="2" ry="2" />
<text  x="1187.00" y="351.5" ></text>
</g>
<g >
<title>rank (1,543 samples, 49.06%)</title><rect x="611.1" y="469" width="578.9" height="15.0" fill="rgb(254,85,41)" rx="2" ry="2" />
<text  x="614.07" y="479.5" >rank</text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.13%)</title><rect x="609.6" y="341" width="1.5" height="15.0" fill="rgb(242,123,32)" rx="2" ry="2" />
<text  x="612.57" y="351.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.13%)</title><rect x="530.8" y="53" width="1.5" height="15.0" fill="rgb(231,46,43)" rx="2" ry="2" />
<text  x="533.78" y="63.5" ></text>
</g>
</g>
</svg>
